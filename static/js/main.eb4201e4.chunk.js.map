{"version":3,"sources":["index.js"],"names":["settings","chat","domain","channel","sliders","volume","min","max","step","value","speed","checkboxes","table","checked","mic","socket","server","port","robotName","robotID","io","connect","onMessageSendEvent","message","console","log","emit","robot_name","robot_id","room","secret","sleep","ms","Promise","resolve","setTimeout","_callee","volumeSlider","speedSlider","C_Users_bryan_Documents_react_app_chat_messages_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","document","getElementById","stop","Slider","props","_this","Object","C_Users_bryan_Documents_react_app_chat_messages_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_bryan_Documents_react_app_chat_messages_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_bryan_Documents_react_app_chat_messages_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","undefined","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","name","type","id","inputId","React","Component","Toggle","_this2","_this3","divId","onClick","identifier","Chatbox","src","title","height","ButtonPanel","vol","onUpdateSliderSettings","window","confirm","ReactDOM","render"],"mappings":"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","file":"static/js/main.eb4201e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst settings = {\r\n  chat: {\r\n    domain: \"https://www.letsrobot.tv/chat/\",\r\n    channel: \"jill\"\r\n  },\r\n  sliders: {\r\n    volume: {\r\n      min: \"0\",\r\n      max: \"100\",\r\n      step: \"5\",\r\n      value: \"80\"\r\n    },\r\n    speed: {\r\n      min: \"-1.0\",\r\n      max: \"1.0\",\r\n      step: \"0.1\",\r\n      value: \"1.0\"\r\n    }\r\n  },\r\n  // I don't think I actually need this section anymore.\r\n  checkboxes: {\r\n    table: {\r\n      checked: \"false\"\r\n    },\r\n    mic: {\r\n      checked: \"true\"\r\n    }\r\n  },\r\n  socket: {\r\n    server: \"wss://letsrobot.tv\",\r\n    port: \"8000\",\r\n    robotName: \"sixy\",\r\n    robotID: \"80459902\"\r\n  }\r\n};\r\n\r\nconst socket = io.connect(settings.socket.server + \":\" + settings.socket.port);\r\n\r\nfunction onMessageSendEvent(message) {\r\n  console.log(\"Got message\", message);\r\n  socket.emit(\"chat_message\", {\r\n    message: \"[\" + settings.socket.robotName + \"] .\" + message,\r\n    robot_name: settings.socket.robotName,\r\n    robot_id: settings.socket.robotID,\r\n    room: settings.chat.channel,\r\n    secret: \"iknowyourelookingatthisthatsfine\"\r\n  });\r\n}\r\n\r\nfunction onRebootRequest() {\r\n  console.log(\"Got reboot request\");\r\n  if (window.confirm(\"Are you sure you want to reboot?\")) {\r\n    onMessageSendEvent(\"reboot\");\r\n  }\r\n}\r\n\r\nfunction onEnableToggleSetting(identifier) {\r\n  console.log(\"Got on state for\", identifier);\r\n  onMessageSendEvent(identifier + (identifier === \"mic\" ? \" unmute\" : \" on\"));\r\n}\r\n\r\nfunction onDisableToggleSetting(identifier) {\r\n  console.log(\"Got off state for\", identifier);\r\n  onMessageSendEvent(identifier + (identifier === \"mic\" ? \" mute\" : \" off\"));\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function onUpdateSliderSettings() {\r\n  console.log(\"got update event\");\r\n\r\n  let volumeSlider = document.getElementById(\"volumeSlider\");\r\n  let speedSlider = document.getElementById(\"speedSlider\");\r\n  onMessageSendEvent(\"vol \" + volumeSlider.value);\r\n  await sleep(1000);\r\n  onMessageSendEvent(\"speed \" + speedSlider.value);\r\n}\r\n\r\nclass Slider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: undefined\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"slidecontainer\">\r\n        <p>{this.props.name}</p>\r\n        <input\r\n          type=\"range\"\r\n          className=\"slider\"\r\n          min={this.props.min}\r\n          max={this.props.max}\r\n          value={this.state.value}\r\n          step={this.props.step}\r\n          id={this.props.inputId}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Toggle extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: props.checked\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div id={this.props.divId}>\r\n        <p>{this.props.name}</p>\r\n        <button\r\n          className=\"btn onButton\"\r\n          onClick={() => onEnableToggleSetting(this.props.identifier)}\r\n        >\r\n          On\r\n        </button>\r\n        <button\r\n          className=\"btn offButton\"\r\n          onClick={() => onDisableToggleSetting(this.props.identifier)}\r\n        >\r\n          Off\r\n        </button>\r\n        {/*<label className=\"switch\">\r\n          <input type=\"checkbox\" id={this.props.inputId} />\r\n          <span className=\"slider_round\" />\r\n        </label>*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Chatbox extends React.Component {\r\n  src = settings.chat.domain + settings.chat.channel;\r\n  render() {\r\n    return <iframe src={this.src} title=\"chatbox\" height=\"800\" />;\r\n  }\r\n}\r\n\r\nclass ButtonPanel extends React.Component {\r\n  vol = settings.sliders.volume;\r\n  speed = settings.sliders.speed;\r\n  render() {\r\n    return (\r\n      <div className=\"ButtonPanel\">\r\n        <Slider\r\n          name=\"Volume\"\r\n          min={this.vol.min}\r\n          max={this.vol.max}\r\n          step={this.vol.step}\r\n          inputId=\"volumeSlider\"\r\n        />\r\n        <Slider\r\n          name=\"Speed\"\r\n          min={this.speed.min}\r\n          max={this.speed.max}\r\n          step={this.speed.step}\r\n          inputId=\"speedSlider\"\r\n        />\r\n        <Toggle\r\n          divId=\"tableMode\"\r\n          name=\"Table Mode\"\r\n          inputId=\"tableButton\"\r\n          identifier=\"table\"\r\n          checked={settings.checkboxes.table.checked}\r\n        />\r\n        <Toggle\r\n          divId=\"micEnable\"\r\n          name=\"Microphone\"\r\n          inputId=\"micButton\"\r\n          identifier=\"mic\"\r\n          checked={settings.checkboxes.mic.checked}\r\n        />\r\n        <button\r\n          className=\"btn\"\r\n          onClick={() => onUpdateSliderSettings()}\r\n          id=\"updateButton\"\r\n        >\r\n          Update\r\n        </button>\r\n        <button\r\n          className=\"btn\"\r\n          onClick={() => onRebootRequest()}\r\n          id=\"rebootButton\"\r\n        >\r\n          Reboot\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <div className=\"content\">\r\n    <div className=\"controls\">\r\n      <ButtonPanel />\r\n    </div>\r\n    <Chatbox />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}